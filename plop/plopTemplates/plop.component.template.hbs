import {Component} from '../Base/Component';
import {ComponentOptions} from '../Base/ComponentOptions';
import {IComponentBindings} from '../Base/ComponentBindings';
import {QueryEvents, IBuildingQueryEventArgs} from '../../events/QueryEvents';
import {Initialization} from '../Base/Initialization';

export interface I{{cmpName}}Options  {
  changeMe: boolean;
}

/**
 * jsdoc on the component class will generate the documentation automatically.
 * Be as specific as possible on what the component does, and how to use it.
 */
export class {{cmpName}} extends Component {
  static ID = '{{cmpName}}';

  /**
   * @componentOptions
   */
  static options: I{{cmpName}}Options = {
    /**
     * jsdoc on component options will generate the documentation automatically
     * Be as specific as possible on what the options does, as well as it's default value, if any.
     */
    changeMe: ComponentOptions.buildBooleanOption()
  };

  constructor(public element: HTMLElement, public options?: I{{cmpName}}Options, bindings?: IComponentBindings) {
    super(element, {{cmpName}}.ID, bindings);
    this.options = ComponentOptions.initComponentOptions(element, {{cmpName}}, options);

    // This is an example on how to hook a handler on a query event.
    this.bind.onRootElement(QueryEvents.buildingQuery, (args: IBuildingQueryEventArgs) => this.handleBuildingQuery(args));
  }

  private handleBuildingQuery(args: IBuildingQueryEventArgs) {
    args.queryBuilder.advancedExpression.add('Hello world');
  }
}

Initialization.registerAutoCreateComponent({{cmpName}});
